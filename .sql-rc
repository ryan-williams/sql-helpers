alias sq=sqlite3
alias squ=sqlite-utils
alias sqm="sqlite-utils memory"
defn sqr sqlite3 -readonly

sqlite_table_rows() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "Usage: ${FUNCNAME[0]} <db> [table...]" >&2
        return 1
    fi
    db="$1"; shift
    if [ $# -gt 0 ]; then
        for tbl in "$@"; do
            sqlite3 -readonly "$db" "SELECT count(*) FROM $tbl;"
        done
    else
        echo "SELECT 'SELECT \"' || name || '\", count(*) FROM ' || name || ';'  FROM sqlite_master WHERE type = 'table';" \
        | sqlite3 -readonly "$db" \
        | sqlite3 -readonly "$db"
    fi
}
export -f sqlite_table_rows
defn str sqlite_table_rows
defn stc sqlite_table_rows
defn sqc sqlite_table_rows

sqlite_head() {
    if [ $# -lt 2 ]; then
        echo "Usage: ${FUNCNAME[0]} [...sqlite opts] [-n <num=10>] <db> <tbl>" >&2
        return 1
    fi
    local tbl="${@:(($#))}"
    local db="${@:(($#-1)):1}"
    set -- "${@:1:$(($#-2))}"
    local args=()
    local n=10
    while [ $# -gt 0 ]; do
        arg="$1"; shift
        case "$arg" in
            -n) n="$1"; shift ;;
            *) args+=("$arg") ;;
        esac
    done
    sqlite3 -readonly "${args[@]}" "$db" "SELECT * FROM $tbl LIMIT $n;"
}
export -f sqlite_head
defn sqh sqlite_head
defn sqhh sqlite_head -headers
defn sqhj sqlite_head -json

sqlite_list_tables() {
    if [ $# -ne 1 ]; then
        echo "Usage: ${FUNCNAME[0]} <db>" >&2
        return 1
    fi
    db="$1"; shift
    sqlite3 -readonly "$db" 'SELECT name FROM sqlite_master WHERE type="table"'
}
export -f sqlite_list_tables
defn slt sqlite_list_tables

sqlite_table_schemas() {
    if [ $# -eq 0 ]; then
        echo "Usage: ${FUNCNAME[0]} <db> [tbl...]" >&2
        return 1
    fi
    db="$1"; shift
    if [ $# -gt 0 ]; then
        for tbl in "$@"; do
            sqlite3 -readonly "$db" ".schema $tbl"
        done
    else
        echo "SELECT '.schema \"' || name || '\"'  FROM sqlite_master WHERE type = 'table';" \
        | sqlite3 -readonly "$db" \
        | sqlite3 -readonly "$db"
     fi
}
export -f sqlite_table_schemas
defn sts sqlite_table_schemas
defn sqs sqlite_table_schemas

sqlite2parquet() {
    if [ $# -lt 3 ]; then
        echo "Usage: ${FUNCNAME[0]} <db_path> <tbl> <pqt_path> [sql_opts] [pqt_opts]" >&2
        return 1
    fi
    db_path="$1"; shift
    tbl="$1"; shift
    pqt_path="$1"; shift
    sql_opts="$1"; shift
    pqt_opts="$1"; shift
    python -c "import pandas as pd; df = pd.read_sql_table('$2', 'sqlite:///$1', $sql_opts); df.to_parquet('$3', $pqt_opts); print(len(df))"
}
export -f sqlite2parquet
defn s2p sqlite2parquet
